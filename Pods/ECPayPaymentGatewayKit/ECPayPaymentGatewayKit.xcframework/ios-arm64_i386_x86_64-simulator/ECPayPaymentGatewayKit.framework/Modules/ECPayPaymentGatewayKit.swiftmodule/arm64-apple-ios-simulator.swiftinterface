// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name ECPayPaymentGatewayKit
import Alamofire
import CryptoSwift
@_exported import ECPayPaymentGatewayKit
import Foundation
import IQKeyboardManagerSwift
import KeychainSwift
import PromiseKit
import SafariServices
import Security
import Swift
import SwiftyJSON
import SwiftyXMLParser
import UIKit
import WebKit
@objc @_inheritsConvenienceInitializers @objcMembers open class ExitConfirmParm : ObjectiveC.NSObject {
  @objc public var title: Swift.String
  @objc public var message: Swift.String
  @objc public var action1: Swift.String
  @objc public var action2: Swift.String
  @objc public var inherit: Swift.Bool
  @objc public convenience init(_ title: Swift.String, message: Swift.String)
  @objc public convenience init(_ title: Swift.String, message: Swift.String, action1: Swift.String, action2: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @objcMembers open class CustomErrorMessageParam : ObjectiveC.NSObject {
  @objc public var customErrorAlertTitle: Swift.String
  @objc public var customErrorAlertMessage: Swift.String
  @objc public var completionAfterCustomErrorAlertMessage: Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GwWebviewController : ECPayPaymentGatewayKit.WebViewController {
  @objc public var completion: (() -> Swift.Void)?
  @objc override dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol KeyExchangeHandler {
  func keyExchangeApiURL() -> Swift.String
}
extension UIControl {
  public typealias UIControlTargetClosure = (UIKit.UIControl) -> ()
  public func addAction(for event: UIKit.UIControl.Event, closure: @escaping UIKit.UIControl.UIControlTargetClosure)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TestingTokenCallbackState : ECPayPaymentGatewayKit.CallbackState {
  @objc public var RtnCode: Swift.Int
  @objc public var RtnMsg: Swift.String
  @objc public var Token: Swift.String
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class WebViewManager : ObjectiveC.NSObject {
  @objc public static func showWeb(_ url: Swift.String, title: Swift.String? = nil, completion: (() -> Swift.Void)? = nil)
  @objc public static func showWeb(_ url: Swift.String, from: UIKit.UIViewController? = nil, title: Swift.String? = nil, completion: (() -> Swift.Void)? = nil)
  @objc public static func showWeb(_ url: Swift.String, from: UIKit.UIViewController? = nil, title: Swift.String? = nil, navColor: UIKit.UIColor? = nil, completion: (() -> Swift.Void)? = nil)
  @objc public static func getWebViewControllerUseIntermediate(_ url: Swift.String, title: Swift.String? = nil, completion: (() -> Swift.Void)? = nil) -> UIKit.UIViewController
  @objc public static func getWebNavUseIntermediate(_ url: Swift.String, parameters: [Swift.String : Any] = [:], title: Swift.String? = nil, customErrorMessageParam: ECPayPaymentGatewayKit.CustomErrorMessageParam? = nil, completion: (() -> Swift.Void)? = nil) -> UIKit.UINavigationController
  @objc public static func getWebNavUseIntermediate(_ url: Swift.String, parameters: [Swift.String : Any] = [:], title: Swift.String? = nil, customErrorMessageParam: ECPayPaymentGatewayKit.CustomErrorMessageParam?, exitConfirmParm: ECPayPaymentGatewayKit.ExitConfirmParm?, completion: (() -> Swift.Void)? = nil) -> UIKit.UINavigationController
  @objc public static func showWebUseIntermediate(_ url: Swift.String, title: Swift.String? = nil, completion: (() -> Swift.Void)? = nil)
  @objc public static func showWebUseIntermediate(_ url: Swift.String, from: UIKit.UIViewController? = nil, title: Swift.String? = nil, completion: (() -> Swift.Void)? = nil)
  @objc public static func showNativeWeb(_ url: Swift.String, completion: (() -> Swift.Void)? = nil)
  @objc public static func showNativeWebUseIntermediate(_ url: Swift.String, completion: (() -> Swift.Void)? = nil)
  public static func getIntermediateQueryWithURL(_ url: Swift.String, parameters: [Swift.String : Any] = [:]) -> PromiseKit.Promise<Swift.String>
  @objc deinit
  @objc override dynamic public init()
}
public class ClearMessage : ECPayPaymentGatewayKit.Message {
  final public let data: Foundation.Data
  required public init(data: Foundation.Data)
  public convenience init(string: Swift.String, using encoding: Swift.String.Encoding) throws
  public func string(encoding: Swift.String.Encoding) throws -> Swift.String
  public func encrypted(with key: ECPayPaymentGatewayKit.PublicKey, padding: ECPayPaymentGatewayKit.Padding) throws -> ECPayPaymentGatewayKit.EncryptedMessage
  public func signed(with key: ECPayPaymentGatewayKit.PrivateKey, digestType: ECPayPaymentGatewayKit.Signature.DigestType) throws -> ECPayPaymentGatewayKit.Signature
  public func verify(with key: ECPayPaymentGatewayKit.PublicKey, signature: ECPayPaymentGatewayKit.Signature, digestType: ECPayPaymentGatewayKit.Signature.DigestType) throws -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class XMLConfigurationManager : ObjectiveC.NSObject {
  public enum source : Swift.String {
    case URL
    case CONF
    case TEXT
    case REGEX
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public class var swiftSharedInstance: ECPayPaymentGatewayKit.XMLConfigurationManager {
    get
  }
  public class func sharedInstance() -> ECPayPaymentGatewayKit.XMLConfigurationManager
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
extension XMLConfigurationManager {
  public func loadData(merchantID: Swift.String = "", isForceToGetRemoteData: Swift.Bool = false) -> PromiseKit.Promise<Swift.Void>
}
extension XMLConfigurationManager {
  public func getElementByID(_ from: ECPayPaymentGatewayKit.XMLConfigurationManager.source, id: Swift.String) -> Swift.String?
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ECPayPaymentGatewayManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public class func sharedInstance() -> ECPayPaymentGatewayKit.ECPayPaymentGatewayManager
  public struct ManagerProp {
  }
  public var prop: ECPayPaymentGatewayKit.ECPayPaymentGatewayManager.ManagerProp
  @objc public func initialize()
  @objc public func initialize(env: ECPayPaymentGatewayKit.EnvironmentType)
  @objc public func sdkEnvironmentString() -> Swift.String
  @objc public func createPayment(token: Swift.String, merchantID: Swift.String = "", useResultPage: Swift.Int = 1, appStoreName: Swift.String = "", language: Swift.String = "zh-TW", callback: @escaping ECPayPaymentGatewayKit.CallbackFunction)
  @objc public func testToGetTestingTradeToken(paymentUIType: Swift.Int, is3D: Swift.Bool = true, merchantID: Swift.String, aesKey: Swift.String, aesIV: Swift.String, callback: @escaping ECPayPaymentGatewayKit.CallbackFunction)
  @objc public func testToGetTestingUserToken(is3D: Swift.Bool = true, merchantID: Swift.String, aesKey: Swift.String, aesIV: Swift.String, callback: @escaping ECPayPaymentGatewayKit.CallbackFunction)
  @objc public func testToLaunchApiTestUI(tokenType: Swift.Int, tokenTypeString: Swift.String, token: Swift.String, callback: @escaping ECPayPaymentGatewayKit.CallbackFunction)
  @objc public func testInit()
  @objc public func testAlamofire()
  @objc public func testSwiftyXMLParser()
  @objc public func testIQKeyboard()
  @objc public func testKeyChain()
  @objc public func testAPI()
  @_hasMissingDesignatedInitializers public class ECPayPaymentCallbackStateManager {
    public class func sharedInstance() -> ECPayPaymentGatewayKit.ECPayPaymentGatewayManager.ECPayPaymentCallbackStateManager
    @objc deinit
  }
  @objc deinit
}
public typealias Padding = Security.SecPadding
public enum SwiftyRSA {
  @available(iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  public static func generateRSAKeyPair(sizeInBits size: Swift.Int) throws -> (privateKey: ECPayPaymentGatewayKit.PrivateKey, publicKey: ECPayPaymentGatewayKit.PublicKey)
}
public class EncryptedMessage : ECPayPaymentGatewayKit.Message {
  final public let data: Foundation.Data
  required public init(data: Foundation.Data)
  public func decrypted(with key: ECPayPaymentGatewayKit.PrivateKey, padding: ECPayPaymentGatewayKit.Padding) throws -> ECPayPaymentGatewayKit.ClearMessage
  @objc deinit
}
public struct MultiLanguageWordingProvider {
  public static var swiftSharedInstance: ECPayPaymentGatewayKit.MultiLanguageWordingProvider {
    get
  }
  public static func sharedInstance() -> ECPayPaymentGatewayKit.MultiLanguageWordingProvider
}
extension MultiLanguageWordingProvider {
  public func pg_sdk_default_alert_title() -> Swift.String
  public func pg_sdk_default_alert_btn_determine() -> Swift.String
  public func pg_sdk_default_alert_btn_cancel() -> Swift.String
}
extension MultiLanguageWordingProvider {
  public func pg_sdk_default_msg_loading() -> Swift.String
}
extension MultiLanguageWordingProvider {
  public func pg_sdk_order_btn_back_store() -> Swift.String
  public func pg_sdk_order_msg_confirm_back_store() -> Swift.String
}
extension MultiLanguageWordingProvider {
  public func pg_sdk_default_spinner_option_default() -> Swift.String
  public func pg_sdk_default_btn_confirm_payment() -> Swift.String
  public func pg_sdk_default_btn_edit() -> Swift.String
  public func pg_sdk_default_btn_delete() -> Swift.String
  public func pg_sdk_default_btn_next() -> Swift.String
}
extension MultiLanguageWordingProvider {
  public func pg_sdk_api_error_sign_verify_false() -> Swift.String
  public func pg_sdk_api_error_network_abnormal() -> Swift.String
  public func pg_sdk_api_error_system_abnormal() -> Swift.String
}
extension MultiLanguageWordingProvider {
  public func pg_sdk_web_view_error_no_network_title() -> Swift.String
  public func pg_sdk_web_view_error_no_network(errorCode: Swift.Int = 0) -> Swift.String
  public func pg_sdk_web_view_error_timeout() -> Swift.String
  public func pg_sdk_web_view_error_ca_error_title() -> Swift.String
  public func pg_sdk_web_view_error_ca_error(errorCode: Swift.Int) -> Swift.String
}
extension MultiLanguageWordingProvider {
  public func pg_sdk_fail_web_view_error_ca_error(errorCode: Swift.Int) -> Swift.String
  public func pg_sdk_fail_web_view_error_received_error(errorCode: Swift.Int, errorMessage: Swift.String) -> Swift.String
}
extension MultiLanguageWordingProvider {
  public func pg_sdk_view_error_install_certificate_cancel() -> Swift.String
}
extension MultiLanguageWordingProvider {
  public func pg_sdk_payment_msg_confirm_cancel_payment() -> Swift.String
}
extension MultiLanguageWordingProvider {
  public func pg_sdk_payment_type_title() -> Swift.String
  public func pg_sdk_payment_type_section() -> Swift.String
  public func pg_sdk_payment_type_credit_card_once_for_all() -> Swift.String
  public func pg_sdk_payment_type_credit_card_installment() -> Swift.String
  public func pg_sdk_payment_type_atm() -> Swift.String
  public func pg_sdk_payment_type_cvs_code() -> Swift.String
  public func pg_sdk_payment_type_cvs_barcode() -> Swift.String
}
extension MultiLanguageWordingProvider {
  public func pg_sdk_credit_card_payment_title() -> Swift.String
  public func pg_sdk_credit_card_merchant_card_type() -> Swift.String
  public func pg_sdk_credit_card_number() -> Swift.String
  public func pg_sdk_credit_card_number_input_hint() -> Swift.String
  public func pg_sdk_credit_card_valid() -> Swift.String
  public func pg_sdk_credit_card_valid_input_hint() -> Swift.String
  public func pg_sdk_credit_card_cvv2() -> Swift.String
  public func pg_sdk_credit_card_cvv2_input_hint() -> Swift.String
  public func pg_sdk_credit_card_binding_card() -> Swift.String
  public func pg_sdk_credit_card_option() -> Swift.String
  public func pg_sdk_credit_card_option_input_hint() -> Swift.String
  public func pg_sdk_credit_card_option_other() -> Swift.String
  public func pg_sdk_credit_card_option_note_invalid() -> Swift.String
  public func pg_sdk_credit_card_not_support_foreign_card() -> Swift.String
}
extension MultiLanguageWordingProvider {
  public func pg_sdk_credit_card_installment_number_option() -> Swift.String
  public func pg_sdk_credit_card_installment_number_option_input_hint() -> Swift.String
  public func pg_sdk_credit_card_installment_number_option_number() -> Swift.String
  public func pg_sdk_credit_card_installment_bank_note() -> Swift.String
  public func pg_sdk_credit_card_installment_bank_alert_title() -> Swift.String
}
extension MultiLanguageWordingProvider {
  public func pg_sdk_credit_card_period_type() -> Swift.String
  public func pg_sdk_credit_card_period_type_value() -> Swift.String
  public func pg_sdk_credit_card_period_type_day() -> Swift.String
  public func pg_sdk_credit_card_period_type_month() -> Swift.String
  public func pg_sdk_credit_card_period_type_year() -> Swift.String
}
extension MultiLanguageWordingProvider {
  public func pg_sdk_credit_card_payment_result_title() -> Swift.String
  public func pg_sdk_credit_card_payment_success() -> Swift.String
  public func pg_sdk_credit_card_payment_fail() -> Swift.String
  public func pg_sdk_credit_card_payment_result_code(resultCode: Swift.Int = 1) -> Swift.String
}
extension MultiLanguageWordingProvider {
  public func pg_sdk_atm_payment_title() -> Swift.String
  public func pg_sdk_atm_payment_confirm_section_bank() -> Swift.String
  public func pg_sdk_atm_bank_option() -> Swift.String
  public func pg_sdk_atm_payment_result_section_account() -> Swift.String
  public func pg_sdk_atm_bank_code() -> Swift.String
  public func pg_sdk_atm_bank_account() -> Swift.String
  public func pg_sdk_atm_payment_expire_date() -> Swift.String
}
extension MultiLanguageWordingProvider {
  public func pg_sdk_cvs_code_payment_title() -> Swift.String
  public func pg_sdk_cvs_code_payment_confirm_instruction() -> Swift.String
  public func pg_sdk_cvs_code_payment_result_section() -> Swift.String
  public func pg_sdk_cvs_code() -> Swift.String
  public func pg_sdk_cvs_code_convert_to_barcode() -> Swift.String
  public func pg_sdk_cvs_code_btn_convert_to_barcode() -> Swift.String
  public func pg_sdk_cvs_code_payment_expire_date() -> Swift.String
}
extension MultiLanguageWordingProvider {
  public func pg_sdk_cvs_barcode_payment_title() -> Swift.String
  public func pg_sdk_cvs_barcode_payment_confirm_instruction() -> Swift.String
  public func pg_sdk_cvs_barcode_payment_result_instruction() -> Swift.String
  public func pg_sdk_cvs_barcode_supported_store() -> Swift.String
  public func pg_sdk_cvs_barcode_payment_expire_date() -> Swift.String
}
extension MultiLanguageWordingProvider {
  public func pg_sdk_credit_card_admin_list_title() -> Swift.String
  public func pg_sdk_credit_card_admin_list_empty_hint() -> Swift.String
  public func pg_sdk_credit_card_admin_list_btn_add() -> Swift.String
  public func pg_sdk_credit_card_admin_list_edit_title() -> Swift.String
  public func pg_sdk_credit_card_add_title() -> Swift.String
  public func pg_sdk_credit_card_add_section() -> Swift.String
  public func pg_sdk_credit_card_add_result_success() -> Swift.String
  public func pg_sdk_credit_card_add_result_fail() -> Swift.String
  public func pg_sdk_credit_card_edit_title() -> Swift.String
}
extension MultiLanguageWordingProvider {
  public func pg_sdk_certificate_error_description_title() -> Swift.String
  public func pg_sdk_certificate_error_description_certificate_name() -> Swift.String
  public func pg_sdk_certificate_error_description_note1() -> Swift.String
  public func pg_sdk_certificate_error_description_note2_title1() -> Swift.String
  public func pg_sdk_certificate_error_description_note2() -> Swift.String
  public func pg_sdk_certificate_error_description_btn_install_certificate() -> Swift.String
  public func pg_sdk_certificate_error_description_note3() -> Swift.String
  public func pg_sdk_certificate_error_description_note3_1() -> Swift.String
  public func pg_sdk_certificate_error_description_note3_2() -> Swift.String
}
extension MultiLanguageWordingProvider {
  public func TextCreditCardInstallmentBankAlertBody() -> Swift.String
  public func TextAtmPaymentConfirmNote() -> Swift.String
  public func TextAtmPaymentResultNote() -> Swift.String
  public func TextCvsCodePaymentConfirmNote(expireDays: Swift.Int = 7) -> Swift.String
  public func TextCvsCodePaymentResultNote(expireDays: Swift.Int = 7) -> Swift.String
  public func TextCvsBarcodePaymentConfirmNote(expireDays: Swift.Int = 7) -> Swift.String
  public func TextCvsBarcodePaymentResultNote(expireDays: Swift.Int = 7) -> Swift.String
}
public protocol Message {
  var data: Foundation.Data { get }
  var base64String: Swift.String { get }
  init(data: Foundation.Data)
  init(base64Encoded base64String: Swift.String) throws
}
extension Message {
  public var base64String: Swift.String {
    get
  }
  public init(base64Encoded base64String: Swift.String) throws
}
@_hasMissingDesignatedInitializers @objcMembers public class TestingTokenManager {
  public static func getUserToken(_ is3D: Swift.Bool = true, _ merchantID: Swift.String, _ aesKey: Swift.String, _ aesIV: Swift.String) -> PromiseKit.Promise<ECPayPaymentGatewayKit.TestingTokenManager.TestingUserTokenResponseModel>
  public static func getTradeToken(_ paymentUIType: Swift.Int = 0, _ is3D: Swift.Bool = true, _ merchantID: Swift.String, _ aesKey: Swift.String, _ aesIV: Swift.String) -> PromiseKit.Promise<ECPayPaymentGatewayKit.TestingTokenManager.TestingTradeTokenResponseModel>
  @objc deinit
}
extension TestingTokenManager {
  public typealias TestingUserTokenResponseHeaderModel = ECPayPaymentGatewayKit.TestingTokenManager.TestingTradeTokenResponseHeaderModel
  public typealias TestingUserTokenResponseModel = ECPayPaymentGatewayKit.TestingTokenManager.TestingTradeTokenResponseModel
  public typealias TestingUserTokenResponseEncDataModel = ECPayPaymentGatewayKit.TestingTokenManager.TestingTradeTokenResponseEncDataModel
  public typealias TestingUserTokenResponseOrderInfoModel = ECPayPaymentGatewayKit.TestingTokenManager.TestingTradeTokenResponseOrderInfoModel
  public static func userTokenDecodable<T>(_ model: ECPayPaymentGatewayKit.TestingTokenManager.TestingUserTokenResponseModel, type: T.Type) -> PromiseKit.Promise<T> where T : Swift.Decodable
}
extension TestingTokenManager {
  public struct TestingTradeTokenResponseHeaderModel : Swift.Codable {
    public var Timestamp: Foundation.Date
    public var RqID: Swift.String?
    public var Revision: Swift.String?
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct TestingTradeTokenResponseModel : Swift.Codable {
    public var MerchantID: Swift.Int
    public var RqHeader: ECPayPaymentGatewayKit.TestingTokenManager.TestingTradeTokenResponseHeaderModel?
    public var RpHeader: ECPayPaymentGatewayKit.TestingTokenManager.TestingTradeTokenResponseHeaderModel?
    public var TransCode: Swift.Int
    public var TransMsg: Swift.String
    public var Data: Swift.String?
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct TestingTradeTokenResponseEncDataModel : Swift.Codable {
    public var RtnCode: Swift.Int
    public var RtnMsg: Swift.String
    public var MerchantID: Swift.Int
    public var Token: Swift.String
    public var TokenExpireDate: Foundation.Date
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct TestingTradeTokenResponseOrderInfoModel : Swift.Codable {
    public var MerchantTradeNo: Swift.Int
    public var MerchantTradeDate: Foundation.Date
    public var TotalAmount: Swift.Int
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public static func tradeTokenDecodable<T>(_ model: ECPayPaymentGatewayKit.TestingTokenManager.TestingTradeTokenResponseModel, type: T.Type) -> PromiseKit.Promise<T> where T : Swift.Decodable
}
extension TestingTokenManager {
  public enum TestingTokenError : Swift.Error {
    case repsonseErrorJustOccurred
    public static func == (a: ECPayPaymentGatewayKit.TestingTokenManager.TestingTokenError, b: ECPayPaymentGatewayKit.TestingTokenManager.TestingTokenError) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CreatePaymentCallbackState : ECPayPaymentGatewayKit.CallbackState {
  @objc public var RtnCode: Swift.Int
  @objc public var RtnMsg: Swift.String
  @objc public var PaymentType: ECPayPaymentGatewayKit.CreatePaymentCallbackState_PaymentType
  @objc public var PlatformID: Swift.String?
  @objc public var MerchantID: Swift.Int
  @objc public var MerchantMemberID: Swift.Int
  @objc public var OrderInfo: ECPayPaymentGatewayKit.CreatePaymentCallbackState_OrderInfoResponseModel?
  @objc public var CardInfo: ECPayPaymentGatewayKit.CreatePaymentCallbackState_CardInfoResponseModel?
  @objc public var ATMInfo: ECPayPaymentGatewayKit.CreatePaymentCallbackState_ATMInfoResponseModel?
  @objc public var CVSInfo: ECPayPaymentGatewayKit.CreatePaymentCallbackState_CVSInfoResponseModel?
  @objc public var BarcodeInfo: ECPayPaymentGatewayKit.CreatePaymentCallbackState_BarcodeInfoResponseModel?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum CreatePaymentCallbackState_PaymentType : Swift.Int {
  case CreditCard = 0
  case CreditInstallment = 1
  case ATM = 2
  case CVS = 3
  case Barcode = 4
  case OPay = 5
  case ApplePay = 6
  case GooglePay = 7
  case SamsungPay = 8
  case PeriodicFixedAmount = 9
  case NationalTravelCard = 10
  case Unknown = 999
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class CreatePaymentCallbackState_OrderInfoResponseModel : ObjectiveC.NSObject, Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class CreatePaymentCallbackState_CardInfoResponseModel : ObjectiveC.NSObject, Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class CreatePaymentCallbackState_ATMInfoResponseModel : ObjectiveC.NSObject, Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class CreatePaymentCallbackState_CVSInfoResponseModel : ObjectiveC.NSObject, Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class CreatePaymentCallbackState_BarcodeInfoResponseModel : ObjectiveC.NSObject, Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class WebViewController : UIKit.UIViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc public func load(_ urlRequest: Foundation.URLRequest)
  @objc public func setNavigationTitle(_ title: Swift.String)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension WebViewController : WebKit.WKNavigationDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
}
extension WebViewController : WebKit.WKUIDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, runJavaScriptConfirmPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
}
extension WebViewController : WebKit.WKScriptMessageHandler {
  @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
@objc @_inheritsConvenienceInitializers final public class UserAgentFetcher : ObjectiveC.NSObject {
  @objc final public func fetch() -> Swift.String
  @objc deinit
  @objc override dynamic public init()
}
public protocol Key : AnyObject {
  var reference: Security.SecKey { get }
  var originalData: Foundation.Data? { get }
  init(data: Foundation.Data) throws
  init(reference: Security.SecKey) throws
  init(base64Encoded base64String: Swift.String) throws
  init(pemEncoded pemString: Swift.String) throws
  init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle) throws
  init(derNamed derName: Swift.String, in bundle: Foundation.Bundle) throws
  func pemString() throws -> Swift.String
  func data() throws -> Foundation.Data
  func base64String() throws -> Swift.String
}
extension Key {
  public func base64String() throws -> Swift.String
  public func data() throws -> Foundation.Data
  public init(base64Encoded base64String: Swift.String) throws
  public init(pemEncoded pemString: Swift.String) throws
  public init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle = Bundle.main) throws
  public init(derNamed derName: Swift.String, in bundle: Foundation.Bundle = Bundle.main) throws
}
@objc public enum EnvironmentType : Swift.Int {
  case Beta
  case Stage
  case Prod
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public typealias WebViewIntermediateData = (UUID: Swift.String, KeyInfo: Swift.String, Signature: Swift.String, EncData: Swift.String)
@_hasMissingDesignatedInitializers public class APIManager : ECPayPaymentGatewayKit.KeyExchangeHandler {
  public func keyExchangeApiURL() -> Swift.String
  public static func generalAPIHandle(_ url: Swift.String, parameters: [Swift.String : Any], parametersAtBodyRoot: [Swift.String : Any] = [:], alreadyRetryOnce: Swift.Bool = false, isDismissReGenerateKey: Swift.Bool = false) -> PromiseKit.Promise<ECPayPaymentGatewayKit.GeneralAPIDataModel>
  public static func generalWebViewIntermediateData(_ parameters: [Swift.String : Any]) -> PromiseKit.Promise<ECPayPaymentGatewayKit.WebViewIntermediateData>
  @objc deinit
}
public protocol APIManagerResponseHandler {
}
public protocol APIManagerRequestHandler {
  static func apiUrl() -> Swift.String
  static func request<T>() -> PromiseKit.Promise<T> where T : ECPayPaymentGatewayKit.APIManagerResponseHandler
  static func request<T>(parameters: [Swift.String : Any]?) -> PromiseKit.Promise<T> where T : ECPayPaymentGatewayKit.APIManagerResponseHandler
  static func request<T>(parameters: [Swift.String : Any]?, parametersAtBodyRoot: [Swift.String : Any]?) -> PromiseKit.Promise<T> where T : ECPayPaymentGatewayKit.APIManagerResponseHandler
}
public class PublicKey : ECPayPaymentGatewayKit.Key {
  final public let reference: Security.SecKey
  final public let originalData: Foundation.Data?
  public func pemString() throws -> Swift.String
  required public init(reference: Security.SecKey) throws
  required public init(data: Foundation.Data) throws
  public static func publicKeys(pemEncoded pemString: Swift.String) -> [ECPayPaymentGatewayKit.PublicKey]
  @objc deinit
}
public enum APIManagerKeychainKeyStorage : Swift.String {
  case clientPublickey
  case clientPrivatekey
  case serverPublickey
  case clientKeyID
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
@_hasMissingDesignatedInitializers public class APIManagerTools {
  @objc deinit
}
public typealias GeneralAPIDataModel = ECPayPaymentGatewayKit.DecryptedAPIDataModel
public struct DecryptedAPIDataModel {
}
public class Signature {
  public enum DigestType {
    case sha1
    case sha224
    case sha256
    case sha384
    case sha512
    public static func == (a: ECPayPaymentGatewayKit.Signature.DigestType, b: ECPayPaymentGatewayKit.Signature.DigestType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  final public let data: Foundation.Data
  public init(data: Foundation.Data)
  public convenience init(base64Encoded base64String: Swift.String) throws
  public var base64String: Swift.String {
    get
  }
  @objc deinit
}
@objc public enum CallbackStateStatusType : Swift.Int {
  case Fail = 0
  case Success = 1
  case Cancel = 2
  case Unknown = 999
  public func toString() -> Swift.String
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CallbackState : ObjectiveC.NSObject {
  @objc public var callbackStateStatus: ECPayPaymentGatewayKit.CallbackStateStatusType
  @objc public var callbackStateMessage: Swift.String
  @objc public func statusToString() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public typealias CallbackFunction = (ECPayPaymentGatewayKit.CallbackState) -> Swift.Void
public enum SwiftyRSAError : Swift.Error {
  case pemDoesNotContainKey
  case keyRepresentationFailed(error: CoreFoundation.CFError?)
  case keyGenerationFailed(error: CoreFoundation.CFError?)
  case keyCreateFailed(error: CoreFoundation.CFError?)
  case keyAddFailed(status: Darwin.OSStatus)
  case keyCopyFailed(status: Darwin.OSStatus)
  case tagEncodingFailed
  case asn1ParsingFailed
  case invalidAsn1RootNode
  case invalidAsn1Structure
  case invalidBase64String
  case chunkDecryptFailed(index: Swift.Int)
  case chunkEncryptFailed(index: Swift.Int)
  case stringToDataConversionFailed
  case dataToStringConversionFailed
  case invalidDigestSize(digestSize: Swift.Int, maxChunkSize: Swift.Int)
  case signatureCreateFailed(status: Darwin.OSStatus)
  case signatureVerifyFailed(status: Darwin.OSStatus)
  case pemFileNotFound(name: Swift.String)
  case derFileNotFound(name: Swift.String)
  case notAPublicKey
  case notAPrivateKey
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LaunchApiTestUICallbackState : ECPayPaymentGatewayKit.CallbackState {
  @objc public var RtnCode: Swift.Int
  @objc public var RtnMsg: Swift.String
  @objc public var CreatePaymentCallbackResult: ECPayPaymentGatewayKit.CreatePaymentCallbackState?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
public enum APIManagerError : Swift.Error {
  case unknownError
  case keyExchangeError(rtnCode: Swift.Int, rtnMsg: Swift.String)
  case keyExchangeHeaderError
  case encryptedToDecryptedDataDecodableError
  case generalAPIFailWhenProcessBodyData
  case generalAPIFailWhenProcessHeaderKeyInfo
  case generalAPIFailWhenProcessHeaderSignature
  case responseParameterIncorrect
  case responseSignatureInvalid(transCode: Swift.Int, transMsg: Swift.String)
  case responseGetKeyInfoError
  case responseAPIError(code: Swift.Int, msg: Swift.String)
  case getWebViewEncDataError
  case getWebViewKeyInfoError
  case getWebViewSignatureError
  public var localizedDescription: Swift.String {
    get
  }
}
@objc(PublicKey) public class _objc_PublicKey : ObjectiveC.NSObject, ECPayPaymentGatewayKit.Key {
  @objc public var reference: Security.SecKey {
    @objc get
  }
  @objc public var originalData: Foundation.Data? {
    @objc get
  }
  @objc public func pemString() throws -> Swift.String
  @objc public func data() throws -> Foundation.Data
  @objc public func base64String() throws -> Swift.String
  required public init(swiftValue: ECPayPaymentGatewayKit.PublicKey)
  @objc required public init(data: Foundation.Data) throws
  @objc required public init(reference: Security.SecKey) throws
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc required public init(pemEncoded pemString: Swift.String) throws
  @objc required public init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle) throws
  @objc required public init(derNamed derName: Swift.String, in bundle: Foundation.Bundle) throws
  @objc public static func publicKeys(pemEncoded pemString: Swift.String) -> [ECPayPaymentGatewayKit._objc_PublicKey]
  @objc deinit
  @objc override dynamic public init()
}
@objc(PrivateKey) public class _objc_PrivateKey : ObjectiveC.NSObject, ECPayPaymentGatewayKit.Key {
  @objc public var reference: Security.SecKey {
    @objc get
  }
  @objc public var originalData: Foundation.Data? {
    @objc get
  }
  @objc public func pemString() throws -> Swift.String
  @objc public func data() throws -> Foundation.Data
  @objc public func base64String() throws -> Swift.String
  required public init(swiftValue: ECPayPaymentGatewayKit.PrivateKey)
  @objc required public init(data: Foundation.Data) throws
  @objc required public init(reference: Security.SecKey) throws
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc required public init(pemEncoded pemString: Swift.String) throws
  @objc required public init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle) throws
  @objc required public init(derNamed derName: Swift.String, in bundle: Foundation.Bundle) throws
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(VerificationResult) public class _objc_VerificationResult : ObjectiveC.NSObject {
  @objc final public let isSuccessful: Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
@objc(ClearMessage) public class _objc_ClearMessage : ObjectiveC.NSObject, ECPayPaymentGatewayKit.Message {
  @objc public var base64String: Swift.String {
    @objc get
  }
  @objc public var data: Foundation.Data {
    @objc get
  }
  required public init(swiftValue: ECPayPaymentGatewayKit.ClearMessage)
  @objc required public init(data: Foundation.Data)
  @objc required public init(string: Swift.String, using rawEncoding: Swift.UInt) throws
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc public func string(encoding rawEncoding: Swift.UInt) throws -> Swift.String
  @objc public func encrypted(with key: ECPayPaymentGatewayKit._objc_PublicKey, padding: ECPayPaymentGatewayKit.Padding) throws -> ECPayPaymentGatewayKit._objc_EncryptedMessage
  @objc public func signed(with key: ECPayPaymentGatewayKit._objc_PrivateKey, digestType: ECPayPaymentGatewayKit._objc_Signature.DigestType) throws -> ECPayPaymentGatewayKit._objc_Signature
  @objc public func verify(with key: ECPayPaymentGatewayKit._objc_PublicKey, signature: ECPayPaymentGatewayKit._objc_Signature, digestType: ECPayPaymentGatewayKit._objc_Signature.DigestType) throws -> ECPayPaymentGatewayKit._objc_VerificationResult
  @objc deinit
  @objc override dynamic public init()
}
@objc(EncryptedMessage) public class _objc_EncryptedMessage : ObjectiveC.NSObject, ECPayPaymentGatewayKit.Message {
  @objc public var base64String: Swift.String {
    @objc get
  }
  @objc public var data: Foundation.Data {
    @objc get
  }
  required public init(swiftValue: ECPayPaymentGatewayKit.EncryptedMessage)
  @objc required public init(data: Foundation.Data)
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc public func decrypted(with key: ECPayPaymentGatewayKit._objc_PrivateKey, padding: ECPayPaymentGatewayKit.Padding) throws -> ECPayPaymentGatewayKit._objc_ClearMessage
  @objc deinit
  @objc override dynamic public init()
}
@objc(Signature) public class _objc_Signature : ObjectiveC.NSObject {
  @objc public enum DigestType : Swift.Int {
    case sha1
    case sha224
    case sha256
    case sha384
    case sha512
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var base64String: Swift.String {
    @objc get
  }
  @objc public var data: Foundation.Data {
    @objc get
  }
  required public init(swiftValue: ECPayPaymentGatewayKit.Signature)
  @objc public init(data: Foundation.Data)
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc deinit
  @objc override dynamic public init()
}
public class PrivateKey : ECPayPaymentGatewayKit.Key {
  final public let reference: Security.SecKey
  final public let originalData: Foundation.Data?
  public func pemString() throws -> Swift.String
  required public init(reference: Security.SecKey) throws
  required public init(data: Foundation.Data) throws
  @objc deinit
}
